def runProjectBuild(String projectname) {
    script {
        def result = null
        try {
            result = awsCodeBuild(credentialsType: 'keys', 
                projectName: "${projectname}", 
                region: "${params.AWS_REGION}", 
                sourceControlType: 'project',
                artifactTypeOverride: 'S3',
                artifactPackagingOverride: 'ZIP',
                artifactLocationOverride: "${params.ARTIFACT_S3}",
                artifactPathOverride: "${projectname}/${BUILD_ID}",
                artifactNameOverride: 'results.zip',
                downloadArtifacts: 'true')
            sh "echo ${result.getArtifactsLocation()}"
            sh "echo ${result.getBuildId()}"
            return result.getBuildId()
        } catch (Exception e) {
            result=e.getCodeBuildResult()
            currentBuild.result = "UNSTABLE"
        }
    }
}

def runS3Build(String projectname) {
    script {
        def result = null
        try {
            result = awsCodeBuild(credentialsType: 'keys', 
                projectName: "${projectname}", 
                region: "${params.AWS_REGION}", 
                sourceControlType: 'jenkins', 
                artifactTypeOverride: 'S3',
                artifactPackagingOverride: 'ZIP',
                artifactLocationOverride: "${params.ARTIFACT_S3}",
                artifactPathOverride: "${projectname}/${BUILD_ID}",
                sourceLocationOverride: "${params.ARTIFACT_S3}/${params.WEBGOAT_PROJECTNAME}/${BUILD_ID}/results.zip", 
                localSourcePath: "./${params.WEBGOAT_PROJECTNAME}/${BUILD_ID}/results.zip",
                sourceTypeOverride: 'S3',
                artifactNameOverride: 'output.zip',
                downloadArtifacts: 'true')
            sh "echo ${result.getArtifactsLocation()}"
            sh "echo ${result.getBuildId()}"
            return result.getBuildId()
        } catch (Exception e) {
            result=e.getCodeBuildResult()
            currentBuild.result = "UNSTABLE"
        }
    }    
}

pipeline {
    agent any
    parameters {
        string(name: 'BEHAVE_PROJECTNAME', defaultValue: '%BehaveScanningProjectName', description: 'CodeBuild project name')
        string(name: 'WEBGOAT_PROJECTNAME', defaultValue: '%WebGoatBuildProjectName', description: 'CodeBuild project name')
        string(name: 'JOERN_PROJECTNAME', defaultValue: '%JoernScanProjectName', description: 'CodeBuild project name')
        string(name: 'ARTIFACT_S3', defaultValue: '%S3ArtifactName', description: 'CodeBuild artifact bucket')
        choice(name: 'AWS_REGION', choices: ['ap-southeast-1'], description: 'AWS region')
    }
    stages {
        stage('Build webgoat jar') {
            steps {
                script{
                    def output = runProjectBuild(params.WEBGOAT_PROJECTNAME)
                    //sh "aws codebuild batch-get-builds --ids ${output} --output text --query 'builds[].logs.groupName' | xargs -I {} aws logs tail {} --output text"
                    sh "unzip -o ./${params.WEBGOAT_PROJECTNAME}/${BUILD_ID}/results.zip -d ."
                }
            }
        }
        stage('Scanning'){
            parallel{
                stage('Joern scan webgoat') {
                    steps {
                        script{
                            echo "Build number is ${currentBuild.number}"
                            def output = runS3Build(params.JOERN_PROJECTNAME)
                        }
                    }
                }
                stage('Behave test webgoat') {
                    steps {
                        script{
                            echo "Build number is ${currentBuild.number}"
                            def output = runProjectBuild(params.BEHAVE_PROJECTNAME)
                        }
                    }
                }
            }
        }
    }
    post { 
        always { 
            deleteDir()
        }
    }
}